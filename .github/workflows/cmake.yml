name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  lint-cppcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Requirements
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libopenmpi-dev libhdf5-dev libhdf5-openmpi-dev libssl-dev g++ gcc cppcheck
      - name: Run CppCheck
        run: cppcheck --std=c++17 --language=c++ --error-exitcode=1 --enable=all --suppress=unmatchedSuppression --suppress=missingIncludeSystem --suppress=unusedFunction --xml --xml-version=2 --xml-out=cppcheck.xml ${{github.workspace}}/src/*.cpp ${{github.workspace}}/src/PLIHDF5/*

  lint-cpplint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Requirements
        run: pip3 install cpplint
      - name: Run CppLint
        run: cpplint ${{github.workspace}}/src/*.cpp ${{github.workspace}}/src/PLIHDF5/*

  lint-clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Requirements
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y clang-tidy libopenmpi-dev libhdf5-dev libhdf5-openmpi-dev libssl-dev g++ gcc
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: Run Clang-Tidy
        run: clang-tidy -p=${{github.workspace}}/build ${{github.workspace}}/src/*.cpp ${{github.workspace}}/src/PLIHDF5/*
      
  lint-clang-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3    
      - name: Install Requirements
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y clang-format
      - name: Run Clang-Format
        run: clang-format --style=Google -i ${{github.workspace}}/src/*.cpp ${{github.workspace}}/src/PLIHDF5/*
      
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Requirements
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y g++ gcc libssl-dev libhdf5-openmpi-dev libhdf5-dev libopenmpi-dev cppcheck clang-tidy clang-format
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPLIHDF5_USE_LINTING=OFF
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
